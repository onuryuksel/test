import streamlit as st
import pandas as pd
import re
import json # Sadece hata durumunda JSON ayrÄ±ÅŸtÄ±rmayÄ± denemek iÃ§in kullanÄ±labilir
from bs4 import BeautifulSoup # ArtÄ±k ana ayrÄ±ÅŸtÄ±rma iÃ§in kullanÄ±lmayacak ama gÃ¼venlik iÃ§in kalabilir
import io

st.set_page_config(page_title="Sephora Marka Ã‡Ä±karÄ±cÄ±", layout="wide")

st.title("ğŸ’„ Sephora Marka Filtresi Veri Ã‡Ä±karÄ±cÄ±")
st.write("LÃ¼tfen Sephora Ã¼rÃ¼n listeleme sayfasÄ±nÄ±n indirilmiÅŸ HTML dosyasÄ±nÄ± yÃ¼kleyin.")
st.caption("Ã–rnek dosya: 'Makeup Essentials_ Lips, Eyes & Skin â‰¡ Sephora.html'")

def looks_like_brand(label: str) -> bool:
    """
    Verilen metnin bir marka ismine benzeyip benzemediÄŸini kontrol eder.
    (Harf iÃ§ermeli, rakam iÃ§ermemeli gibi basit kurallar)
    """
    if not label:
        return False
    # En az bir harf iÃ§ermeli
    has_letter = any(c.isalpha() for c in label)
    # Rakam iÃ§ermemeli (Marka isimlerinde genelde olmaz)
    has_digit = any(c.isdigit() for c in label)
    # Ã‡ok kÄ±sa olmamalÄ± (Tek harfli markalar nadirdir)
    is_long_enough = len(label) > 1
    # Belki sadece bÃ¼yÃ¼k harf kontrolÃ¼? (Bu siteye Ã¶zel olabilir, isteÄŸe baÄŸlÄ±)
    # is_mostly_upper = label.isupper() or not any(c.islower() for c in label if c.isalpha())

    # return has_letter and not has_digit and is_long_enough and is_mostly_upper
    return has_letter and not has_digit and is_long_enough

def extract_brands_from_html_text(html_text):
    """
    Parses HTML content as plain text, finds brand/count pairs using regex directly
    within escaped JavaScript string literals, filters, and deduplicates.

    Args:
        html_text (str): The HTML content as a string.

    Returns:
        tuple: A tuple containing (list of brand dictionaries, list of headers)
               or (None, None) if data extraction fails.
    """
    brands_data = []
    fieldnames = ['Marka', 'Urun Adedi']

    # Regex: KaÃ§Ä±ÅŸ karakterli tÄ±rnaklarÄ± iÃ§eren "hitCount": sayÄ± , "label":"marka" kalÄ±bÄ±nÄ± ara
    # Grup 1: SayÄ± (\d+)
    # Grup 2: Marka adÄ± ([^"\\]+) - TÄ±rnak veya ters eÄŸik Ã§izgi olmayan karakterler
    pattern = re.compile(r'\\"hitCount\\"\s*:\s*(\d+)\s*,*\s*\\"label\\"\s*:\s*\\"([^"\\]+)\\"', re.IGNORECASE)
    # Alternatif (label Ã¶nce gelirse):
    pattern_alt = re.compile(r'\\"label\\"\s*:\s*\\"([^"\\]+)\\"\s*,*\s*\\"hitCount\\"\s*:\s*(\d+)', re.IGNORECASE)


    st.write("HTML metni iÃ§inde marka/Ã¼rÃ¼n sayÄ±sÄ± Ã§iftleri aranÄ±yor...")
    matches = pattern.findall(html_text)
    matches_alt = pattern_alt.findall(html_text)

    st.info(f"Ä°lk desenle {len(matches)} eÅŸleÅŸme, ikinci desenle {len(matches_alt)} eÅŸleÅŸme bulundu.")

    # Ä°ki desenden gelen sonuÃ§larÄ± birleÅŸtir (label, count sÄ±rasÄ±nda)
    all_potential_matches = []
    if matches:
        # (count, label) formatÄ±nda, (label, count) formatÄ±na Ã§evir
        all_potential_matches.extend([(label, count_str) for count_str, label in matches])
    if matches_alt:
         # Zaten (label, count) formatÄ±nda
        all_potential_matches.extend([(label, count_str) for label, count_str in matches_alt])

    st.write(f"Toplam {len(all_potential_matches)} potansiyel eÅŸleÅŸme iÅŸleniyor...")

    brand_totals: dict[str, int] = {}
    processed_count = 0
    skipped_count = 0

    for label, count_str in all_potential_matches:
        # Heuristic filtrelemeyi uygula
        if looks_like_brand(label):
            try:
                count = int(count_str)
                processed_count += 1
                # TekilleÅŸtirme ve maksimum sayÄ±yÄ± tutma
                brand_name = label.strip() # BaÅŸÄ±ndaki/sonundaki boÅŸluklarÄ± temizle
                brand_totals[brand_name] = max(brand_totals.get(brand_name, 0), count)
            except ValueError:
                skipped_count += 1
                # st.warning(f"SayÄ±ya dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lemedi: '{count_str}' (Marka: '{label}')") # Debug
        else:
            skipped_count += 1
            # st.write(f"Markaya benzemediÄŸi iÃ§in atlandÄ±: '{label}'") # Debug

    st.write(f"{processed_count} olasÄ± marka iÅŸlendi, {skipped_count} tanesi filtreye takÄ±ldÄ±/hatalÄ±ydÄ±.")

    if not brand_totals:
        st.error("Regex ile eÅŸleÅŸen ve marka filtresine uyan veri bulunamadÄ±. HTML kaynaÄŸÄ±nÄ± kontrol edin veya regex desenini/filtreleme kurallarÄ±nÄ± gÃ¶zden geÃ§irin.")
        return None, None

    # SÃ¶zlÃ¼ÄŸÃ¼ listeye Ã§evir
    brands_data = [{"Marka": brand, "Urun Adedi": count} for brand, count in brand_totals.items()]

    st.info(f"Toplam {len(brands_data)} benzersiz marka bulundu.")
    return brands_data, fieldnames

# --- Streamlit File Uploader ---
uploaded_file = st.file_uploader("HTML DosyasÄ±nÄ± Buraya SÃ¼rÃ¼kleyin veya SeÃ§in", type=["html", "htm"])

if uploaded_file is not None:
    try:
        # DosyayÄ± doÄŸrudan metin olarak oku
        html_content = uploaded_file.getvalue().decode("utf-8", errors="ignore")
        st.success(f"'{uploaded_file.name}' baÅŸarÄ±yla yÃ¼klendi ve okundu.")

        with st.spinner("Marka verileri Ã§Ä±karÄ±lÄ±yor..."):
            # Yeni fonksiyonu Ã§aÄŸÄ±r
            brands_data, headers = extract_brands_from_html_text(html_content)

        if brands_data and headers:
            st.success("Marka verileri baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ±!")
            df = pd.DataFrame(brands_data)
            # Markaya gÃ¶re sÄ±rala
            df = df.sort_values(by='Marka').reset_index(drop=True)
            st.dataframe(df, use_container_width=True)
            csv_string = df.to_csv(index=False, encoding='utf-8-sig') # Excel uyumluluÄŸu iÃ§in
            st.download_button(
               label="CSV Olarak Ä°ndir",
               data=csv_string,
               file_name='sephora_markalar.csv',
               mime='text/csv',
            )
        # else: # Hata mesajÄ± zaten fonksiyon iÃ§inde veriliyor

    except UnicodeDecodeError:
        st.error("Dosya kodlamasÄ± UTF-8 deÄŸil gibi gÃ¶rÃ¼nÃ¼yor. LÃ¼tfen UTF-8 formatÄ±nda kaydedilmiÅŸ bir HTML dosyasÄ± yÃ¼kleyin.")
    except Exception as e:
        st.error(f"Dosya iÅŸlenirken genel bir hata oluÅŸtu: {e}")
        st.exception(e) # DetaylÄ± hata izi iÃ§in
else:
    st.info("HTML dosyasÄ± bekleniyor...")
