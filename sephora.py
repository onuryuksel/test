import streamlit as st
import pandas as pd
import re
import json
from bs4 import BeautifulSoup
import io

st.set_page_config(page_title="Sephora Marka Ã‡Ä±karÄ±cÄ±", layout="wide")

st.title("ğŸ’„ Sephora Marka Filtresi Veri Ã‡Ä±karÄ±cÄ±")
st.write("LÃ¼tfen Sephora Ã¼rÃ¼n listeleme sayfasÄ±nÄ±n indirilmiÅŸ HTML dosyasÄ±nÄ± yÃ¼kleyin.")
st.caption("Ã–rnek dosya: 'Makeup Essentials_ Lips, Eyes & Skin â‰¡ Sephora.html'")

def extract_brands_from_html_content(html_content):
    """
    Parses HTML content string to find embedded brand filter data within script tags,
    extracts brand names and their hit counts. Applies regex directly without pre-check.

    Args:
        html_content (str): The HTML content as a string.

    Returns:
        tuple: A tuple containing (list of brand dictionaries, list of headers)
               or (None, None) if data extraction fails.
    """
    try:
        soup = BeautifulSoup(html_content, 'lxml')
    except Exception as e:
        st.warning(f"lxml parser ile HTML ayrÄ±ÅŸtÄ±rÄ±lÄ±rken hata (html.parser deneniyor): {e}")
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
        except Exception as e2:
             st.error(f"HTML ayrÄ±ÅŸtÄ±rÄ±lamadÄ±: {e2}")
             return None, None

    scripts = soup.find_all('script')

    brands_data = []
    found_data = False
    found_potential_match_script = False # EÅŸleÅŸme denemesi yapÄ±lan script bulundu mu?
    fieldnames = ['Marka', 'Urun Adedi']

    # Regex: "attributeId":"c_brand" ve ardÄ±ndan gelen ilk "values": [...] yapÄ±sÄ±nÄ± arar.
    pattern = re.compile(r'"attributeId"\s*:\s*"c_brand".*?"values"\s*:\s*(\[.*?\])', re.DOTALL)

    st.write(f"Toplam {len(scripts)} script etiketi bulundu ve kontrol ediliyor...")
    matched_scripts_content = [] # Regex'in eÅŸleÅŸtiÄŸi script iÃ§eriklerini sakla

    for i, script in enumerate(scripts):
        script_content = script.get_text()
        if script_content:
            match = pattern.search(script_content)
            if match:
                found_potential_match_script = True # Regex en az bir script'te eÅŸleÅŸti
                st.info(f"Script #{i+1} iÃ§inde regex deseni eÅŸleÅŸti.")
                matched_scripts_content.append(f"--- Script #{i+1} (Regex EÅŸleÅŸti) ---\n{script_content[:1500]}...\n----------------------------------------\n")

                json_like_string = match.group(1)
                json_like_string = json_like_string.strip()
                if json_like_string.endswith(','):
                   json_like_string = json_like_string[:-1]

                try:
                    data_list = json.loads(json_like_string)

                    if isinstance(data_list, list) and data_list:
                        processed_count_in_script = 0
                        for item in data_list:
                            if (isinstance(item, dict) and
                                    'label' in item and isinstance(item['label'], str) and
                                    'hitCount' in item and isinstance(item['hitCount'], int)):
                                # MarkayÄ± ve sayÄ±sÄ±nÄ± eklemeden Ã¶nce zaten listede olup olmadÄ±ÄŸÄ±nÄ± kontrol et
                                current_brand_label = item['label']
                                if not any(d['Marka'] == current_brand_label for d in brands_data):
                                    brands_data.append({
                                        fieldnames[0]: current_brand_label,
                                        fieldnames[1]: item['hitCount']
                                    })
                                    processed_count_in_script += 1
                                # else: # Zaten eklenmiÅŸse tekrar ekleme
                                #     st.write(f"Marka '{current_brand_label}' zaten eklenmiÅŸ, atlanÄ±yor.")

                        if processed_count_in_script > 0:
                           st.success(f"Script #{i+1}: {processed_count_in_script} adet geÃ§erli ve yeni marka/Ã¼rÃ¼n sayÄ±sÄ± bulundu ve eklendi.")
                           found_data = True # En az bir geÃ§erli veri bulundu
                           # break # Genellikle tek yerde olduÄŸu iÃ§in burada durulabilir, ama emin olmak iÃ§in devam edelim.
                        # else:
                           # st.warning(f"Script #{i+1}: JSON listesi ayrÄ±ÅŸtÄ±rÄ±ldÄ± ancak iÃ§inde geÃ§erli marka Ã¶ÄŸesi bulunamadÄ±.")
                    # else:
                         # st.warning(f"Script #{i+1}: Regex eÅŸleÅŸti ancak ayrÄ±ÅŸtÄ±rÄ±lan veri beklenen liste formatÄ±nda deÄŸil veya boÅŸ.")

                except json.JSONDecodeError as e:
                    st.warning(f"Script #{i+1} iÃ§inde JSON ayrÄ±ÅŸtÄ±rma hatasÄ±: {e}. Yakalanan veri: {json_like_string[:200]}...")
                except Exception as e:
                    st.error(f"Script #{i+1} iÅŸlenirken beklenmedik bir hata: {e}")

    if not found_data: # EÄŸer dÃ¶ngÃ¼ bittiÄŸinde hiÃ§ geÃ§erli veri eklenmemiÅŸse
        st.error("HTML iÃ§inde geÃ§erli marka filtresi verisi bulunamadÄ±.")
        if found_potential_match_script:
             st.warning("Ancak, regex deseniyle eÅŸleÅŸen script(ler) bulundu. Muhtemelen JSON yapÄ±sÄ± veya iÃ§eriÄŸi beklenenden farklÄ±. LÃ¼tfen aÅŸaÄŸÄ±daki script iÃ§eriklerini inceleyin:")
             with st.expander("Regex ile EÅŸleÅŸen Script Ä°Ã§erikleri (Ä°lk 1500 Karakter)"):
                 for content in matched_scripts_content:
                     st.code(content, language='javascript')
        else:
             st.warning("Regex deseniyle eÅŸleÅŸen hiÃ§bir script etiketi bulunamadÄ±. HTML kaynaÄŸÄ±nÄ± veya regex desenini kontrol edin.")
        return None, None

    st.info(f"Toplam {len(brands_data)} marka bulundu ve iÅŸlendi.")
    return brands_data, fieldnames

# --- Streamlit File Uploader ---
uploaded_file = st.file_uploader("HTML DosyasÄ±nÄ± Buraya SÃ¼rÃ¼kleyin veya SeÃ§in", type=["html", "htm"])

if uploaded_file is not None:
    try:
        stringio = io.StringIO(uploaded_file.getvalue().decode("utf-8"))
        html_content = stringio.read()
        st.success(f"'{uploaded_file.name}' baÅŸarÄ±yla yÃ¼klendi ve okundu.")

        with st.spinner("Marka verileri Ã§Ä±karÄ±lÄ±yor..."):
            brands_data, headers = extract_brands_from_html_content(html_content)

        if brands_data and headers:
            st.success("Marka verileri baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ±!")
            df = pd.DataFrame(brands_data)
            # Markaya gÃ¶re sÄ±ralama (isteÄŸe baÄŸlÄ±)
            df = df.sort_values(by='Marka').reset_index(drop=True)
            st.dataframe(df, use_container_width=True)
            csv_string = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
               label="CSV Olarak Ä°ndir",
               data=csv_string,
               file_name='sephora_markalar.csv',
               mime='text/csv',
            )
        # else: # Hata mesajÄ± zaten fonksiyon iÃ§inde veriliyor

    except UnicodeDecodeError:
        st.error("Dosya kodlamasÄ± UTF-8 deÄŸil gibi gÃ¶rÃ¼nÃ¼yor. LÃ¼tfen UTF-8 formatÄ±nda kaydedilmiÅŸ bir HTML dosyasÄ± yÃ¼kleyin.")
    except Exception as e:
        st.error(f"Dosya iÅŸlenirken genel bir hata oluÅŸtu: {e}")
        st.exception(e)
