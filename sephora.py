import streamlit as st
import pandas as pd
import re
import json
from bs4 import BeautifulSoup
import io # String'i dosya benzeri bir nesneye dÃ¶nÃ¼ÅŸtÃ¼rmek iÃ§in

st.set_page_config(page_title="Sephora Marka Ã‡Ä±karÄ±cÄ±", layout="wide")

st.title("ğŸ’„ Sephora Marka Filtresi Veri Ã‡Ä±karÄ±cÄ±")
st.write("LÃ¼tfen Sephora Ã¼rÃ¼n listeleme sayfasÄ±nÄ±n indirilmiÅŸ HTML dosyasÄ±nÄ± yÃ¼kleyin.")
st.caption("Ã–rnek dosya: 'Makeup Essentials_ Lips, Eyes & Skin â‰¡ Sephora.html'")

def extract_brands_from_html_content(html_content):
    """
    Parses HTML content string to find embedded brand filter data within script tags,
    extracts brand names and their hit counts. Checks ALL script tags and provides debug info.

    Args:
        html_content (str): The HTML content as a string.

    Returns:
        tuple: A tuple containing (list of brand dictionaries, list of headers)
               or (None, None) if data extraction fails.
    """
    try:
        # lxml daha toleranslÄ± olabilir, eÄŸer kurulu deÄŸilse 'html.parser' kullanÄ±labilir.
        # pip install lxml
        soup = BeautifulSoup(html_content, 'lxml')
    except Exception as e:
        st.warning(f"lxml parser ile HTML ayrÄ±ÅŸtÄ±rÄ±lÄ±rken hata (html.parser deneniyor): {e}")
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
        except Exception as e2:
             st.error(f"HTML ayrÄ±ÅŸtÄ±rÄ±lamadÄ±: {e2}")
             return None, None

    scripts = soup.find_all('script')

    brands_data = []
    found_data = False
    found_potential_match_script = False # Desen iÃ§eren script bulundu mu?
    fieldnames = ['Marka', 'Urun Adedi'] # CSV baÅŸlÄ±klarÄ±

    # attributeId:"c_brand" ve ardÄ±ndan gelen ilk "values": [...] yapÄ±sÄ±nÄ± arayan regex
    # JSON iÃ§indeki tÄ±rnaklar iÃ§in kaÃ§Ä±ÅŸ karakterlerini de (\") hesaba katmaya Ã§alÄ±ÅŸÄ±r.
    # .*? ile aÃ§gÃ¶zlÃ¼ olmayan eÅŸleÅŸtirme yapÄ±lÄ±r.
    pattern = re.compile(r'"attributeId"\s*:\s*"c_brand".*?"values"\s*:\s*(\[.*?\])', re.DOTALL)

    st.write(f"Toplam {len(scripts)} script etiketi bulundu ve kontrol ediliyor...")
    relevant_scripts_content = [] # Ä°lgili olabilecek script iÃ§eriklerini sakla

    for i, script in enumerate(scripts):
        # script.string yerine get_text() daha gÃ¼venilir olabilir
        script_content = script.get_text()
        if script_content:
            # Ã–nce anahtar kelimelerin varlÄ±ÄŸÄ±nÄ± kontrol et, regex'i boÅŸuna Ã§alÄ±ÅŸtÄ±rma
            if '"attributeId"' in script_content and '"c_brand"' in script_content and '"values"' in script_content:
                # Potansiyel script bulundu, iÃ§eriÄŸi debug iÃ§in sakla
                relevant_scripts_content.append(f"--- Script #{i+1} (Potansiyel 'c_brand' Ä°Ã§eriyor) ---\n{script_content[:1500]}...\n----------------------------------------\n") # Daha uzun bir parÃ§a alalÄ±m
                found_potential_match_script = True

                match = pattern.search(script_content)
                if match:
                    st.info(f"Script #{i+1} iÃ§inde regex deseni eÅŸleÅŸti!")
                    json_like_string = match.group(1)
                    json_like_string = json_like_string.strip()
                    # Sondaki virgÃ¼lÃ¼ temizle (bazen JSON hatalarÄ±na yol aÃ§ar)
                    if json_like_string.endswith(','):
                       json_like_string = json_like_string[:-1]

                    try:
                        # JSON olarak ayrÄ±ÅŸtÄ±r
                        data_list = json.loads(json_like_string)

                        if isinstance(data_list, list):
                            st.success(f"Script #{i+1}: JSON baÅŸarÄ±yla liste olarak ayrÄ±ÅŸtÄ±rÄ±ldÄ± ({len(data_list)} Ã¶ÄŸe).")
                            processed_count_in_script = 0
                            for item in data_list:
                                # Veri yapÄ±sÄ±nÄ± doÄŸrula
                                if (isinstance(item, dict) and
                                        'label' in item and isinstance(item['label'], str) and
                                        'hitCount' in item and isinstance(item['hitCount'], int)):
                                    brands_data.append({
                                        fieldnames[0]: item['label'],
                                        fieldnames[1]: item['hitCount']
                                    })
                                    processed_count_in_script += 1

                            if processed_count_in_script > 0:
                               st.success(f"Script #{i+1}: {processed_count_in_script} adet geÃ§erli marka/Ã¼rÃ¼n sayÄ±sÄ± bulundu ve eklendi.")
                               found_data = True
                               # break # Ä°lk baÅŸarÄ±lÄ± bulmadan sonra durmak isterseniz bu satÄ±rÄ± aÃ§Ä±n
                            # else:
                                # st.warning(f"Script #{i+1}: JSON listesi ayrÄ±ÅŸtÄ±rÄ±ldÄ± ancak iÃ§inde geÃ§erli marka Ã¶ÄŸesi bulunamadÄ±.")
                        # else:
                             # st.warning(f"Script #{i+1}: Regex eÅŸleÅŸti ancak ayrÄ±ÅŸtÄ±rÄ±lan veri bir liste deÄŸil: {type(data_list)}")

                    except json.JSONDecodeError as e:
                        st.warning(f"Script #{i+1} iÃ§inde JSON ayrÄ±ÅŸtÄ±rma hatasÄ±: {e}. Veri baÅŸlangÄ±cÄ±: {json_like_string[:200]}...")
                    except Exception as e:
                        st.error(f"Script #{i+1} iÅŸlenirken beklenmedik bir hata: {e}")
                # else:
                    # st.write(f"Script #{i+1}: Anahtar kelimeler var ama regex deseni tam eÅŸleÅŸmedi.") # Debug

    if not found_data:
        st.error("HTML iÃ§inde geÃ§erli marka filtresi verisi bulunamadÄ±.")
        if found_potential_match_script:
            st.warning("Ancak, 'attributeId', 'c_brand' ve 'values' anahtar kelimelerini iÃ§eren ÅŸu script(ler) bulundu. LÃ¼tfen iÃ§eriklerini inceleyerek verinin yapÄ±sÄ±nÄ± kontrol edin veya regex desenini buna gÃ¶re ayarlayÄ±n:")
            with st.expander("Potansiyel Olarak Ä°lgili Script Ä°Ã§erikleri (Ä°lk 1500 Karakter)"):
                if relevant_scripts_content:
                    for content in relevant_scripts_content:
                        st.code(content, language='javascript')
                else: # Bu durum aslÄ±nda yaÅŸanmamalÄ± ama bir kontrol
                    st.write("Ä°lgili script iÃ§eriÄŸi bulunamadÄ± (beklenmedik durum).")
        else:
            st.warning("'attributeId', 'c_brand' ve 'values' anahtar kelimelerini iÃ§eren hiÃ§bir script bulunamadÄ±. HTML kaynaÄŸÄ±nÄ± kontrol edin.")
        return None, None

    # Yinelenenleri kaldÄ±r (eÄŸer break kullanÄ±lmadÄ±ysa)
    unique_brands_data = []
    seen_brands = set()
    if brands_data:
        for brand_entry in brands_data:
            if isinstance(brand_entry, dict) and 'Marka' in brand_entry:
                if brand_entry['Marka'] not in seen_brands:
                    unique_brands_data.append(brand_entry)
                    seen_brands.add(brand_entry['Marka'])
            else:
                 st.warning(f"Marka listesinde beklenmeyen Ã¶ÄŸe tipi: {brand_entry}")

    st.info(f"Toplam {len(unique_brands_data)} benzersiz marka bulundu.")
    return unique_brands_data, fieldnames


# --- Streamlit File Uploader ---
uploaded_file = st.file_uploader("HTML DosyasÄ±nÄ± Buraya SÃ¼rÃ¼kleyin veya SeÃ§in", type=["html", "htm"])

if uploaded_file is not None:
    try:
        stringio = io.StringIO(uploaded_file.getvalue().decode("utf-8"))
        html_content = stringio.read()
        st.success(f"'{uploaded_file.name}' baÅŸarÄ±yla yÃ¼klendi ve okundu.")

        with st.spinner("Marka verileri Ã§Ä±karÄ±lÄ±yor..."):
            brands_data, headers = extract_brands_from_html_content(html_content)

        if brands_data and headers:
            st.success("Marka verileri baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ±!")
            df = pd.DataFrame(brands_data)
            st.dataframe(df, use_container_width=True)
            csv_string = df.to_csv(index=False, encoding='utf-8-sig') # Excel uyumluluÄŸu iÃ§in utf-8-sig
            st.download_button(
               label="CSV Olarak Ä°ndir",
               data=csv_string,
               file_name='sephora_markalar.csv',
               mime='text/csv',
            )
        # Hata mesajÄ± zaten extract_brands_from_html_content iÃ§inde veriliyor

    except UnicodeDecodeError:
        st.error("Dosya kodlamasÄ± UTF-8 deÄŸil gibi gÃ¶rÃ¼nÃ¼yor. LÃ¼tfen UTF-8 formatÄ±nda kaydedilmiÅŸ bir HTML dosyasÄ± yÃ¼kleyin.")
    except Exception as e:
        st.error(f"Dosya iÅŸlenirken genel bir hata oluÅŸtu: {e}")
        st.exception(e) # HatayÄ± konsola ve ekrana daha detaylÄ± yazdÄ±r
