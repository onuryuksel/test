import streamlit as st
import requests
from bs4 import BeautifulSoup
import json
import csv
import io

# --- Veri Ã‡Ä±karma Fonksiyonu (Flask versiyonundan uyarlanmÄ±ÅŸ) ---
def extract_designers_from_url(url):
    """
    Verilen URL'den HTML'i Ã§eker, __NEXT_DATA__ JSON'unu Ã§Ä±karÄ±r
    ve designer/brand filtresindeki verileri dÃ¶ndÃ¼rÃ¼r.

    Args:
        url (str): Level Shoes PLP URL'si.

    Returns:
        list: BaÅŸarÄ±lÄ± olursa [['Designer', 'Count'], ['Marka1', SayÄ±1], ...] listesi.
        str: Hata veya uyarÄ± mesajÄ±.
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        # Timeout ekleyerek isteÄŸi yap
        response = requests.get(url, headers=headers, timeout=20)
        response.raise_for_status() # HTTP hatalarÄ±nÄ± kontrol et
    except requests.exceptions.Timeout:
        return "Hata: Ä°stek zaman aÅŸÄ±mÄ±na uÄŸradÄ±. URL'yi kontrol edin veya sonra tekrar deneyin."
    except requests.exceptions.RequestException as e:
        return f"Hata: URL alÄ±nÄ±rken bir sorun oluÅŸtu: {e}"
    except Exception as e:
        return f"Hata: Beklenmedik bir aÄŸ hatasÄ± oluÅŸtu: {e}"

    try:
        soup = BeautifulSoup(response.text, 'html.parser')
        script_tag = soup.find('script', {'id': '__NEXT_DATA__'})

        if not script_tag:
            return "Hata: Sayfa yapÄ±sÄ± beklenenden farklÄ±, '__NEXT_DATA__' bulunamadÄ±."

        json_data_str = script_tag.string
        if not json_data_str:
            return "Hata: __NEXT_DATA__ iÃ§eriÄŸi boÅŸ."

        data = json.loads(json_data_str)

        # JSON yapÄ±sÄ±nÄ± gÃ¼venli bir ÅŸekilde gezin
        apollo_state = data.get('props', {}).get('pageProps', {}).get('__APOLLO_STATE__', {})
        root_query = apollo_state.get('ROOT_QUERY', {})

        product_list_key = next((key for key in root_query if key.startswith('_productList')), None)

        if not product_list_key:
             # Alternatif anahtar yapÄ±sÄ±nÄ± deneyelim (Bazen anahtar ID iÃ§erebilir)
             product_list_key = next((key for key in root_query if '_productList:({' in key), None)
             if not product_list_key:
                 st.json(root_query.keys()) # Hata ayÄ±klama iÃ§in anahtarlarÄ± gÃ¶ster
                 return "Hata: Gerekli Ã¼rÃ¼n listesi verisi sayfada bulunamadÄ± (product list key)."


        facets = root_query.get(product_list_key, {}).get('facets', [])

        designer_facet = None
        for facet in facets:
            # 'brand' veya 'designer' anahtarÄ±nÄ± arayalÄ±m
            if facet.get('key') == 'brand' or facet.get('label', '').lower() == 'designer':
                designer_facet = facet
                break

        if not designer_facet:
            # Hata ayÄ±klama iÃ§in mevcut facet'leri gÃ¶sterelim
            available_facets = [f.get('key') or f.get('label') for f in facets]
            st.write("Bulunan Filtre AnahtarlarÄ±/Etiketleri:", available_facets)
            return "Hata: Sayfada 'brand' veya 'Designer' filtresi bulunamadÄ±."

        designer_options = designer_facet.get('options', [])

        if not designer_options:
            return "UyarÄ±: TasarÄ±mcÄ± filtresinde hiÃ§ seÃ§enek bulunamadÄ±."

        # CSV iÃ§in veriyi hazÄ±rla
        csv_data = [['Designer', 'Count']]
        for option in designer_options:
            name = option.get('name')
            count = option.get('count')
            if name is not None and count is not None:
                csv_data.append([name, count])

        if len(csv_data) <= 1:
             return "UyarÄ±: TasarÄ±mcÄ± verisi bulundu ancak liste boÅŸ."

        return csv_data

    except json.JSONDecodeError:
        return "Hata: Sayfadan alÄ±nan veri JSON formatÄ±nda deÄŸil."
    except (AttributeError, KeyError, TypeError, IndexError) as e:
        st.error(f"Ä°ÅŸleme hatasÄ± detayÄ±: {e}") # GeliÅŸtirme iÃ§in loglama
        return "Hata: Sayfa yapÄ±sÄ± deÄŸiÅŸmiÅŸ olabilir veya beklenmeyen bir veri yapÄ±sÄ± ile karÅŸÄ±laÅŸÄ±ldÄ±."
    except Exception as e:
        st.exception(e) # GeliÅŸtirme iÃ§in tam hata izini gÃ¶ster
        return f"Hata: Veri iÅŸlenirken beklenmedik bir sorun oluÅŸtu: {e}"

# --- CSV DÃ¶nÃ¼ÅŸtÃ¼rme Fonksiyonu ---
def convert_to_csv(data):
    """Verilen listeyi CSV formatÄ±nda string'e Ã§evirir."""
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerows(data)
    return output.getvalue()

# --- Streamlit Uygulama ArayÃ¼zÃ¼ ---
st.set_page_config(page_title="Level Shoes Extractor", layout="wide")
st.title("ğŸ‘  Level Shoes Designer Extractor")
st.markdown("Bir Level Shoes ÃœrÃ¼n Listeleme SayfasÄ± (PLP) URL'si girin ve sayfadaki tasarÄ±mcÄ± filtresi verilerini CSV olarak alÄ±n.")

# Session state kullanarak Ã¶nceki URL'yi ve veriyi sakla
if 'submitted_url' not in st.session_state:
    st.session_state.submitted_url = ""
if 'designer_data' not in st.session_state:
    st.session_state.designer_data = None
if 'error_message' not in st.session_state:
    st.session_state.error_message = None

url = st.text_input(
    "Level Shoes PLP URL:",
    placeholder="https://www.levelshoes.com/...",
    value=st.session_state.submitted_url,
    key="url_input" # Tekrar renderlamada deÄŸeri korumak iÃ§in anahtar
)

col1, col2 = st.columns([1, 5]) # Butonlar iÃ§in sÃ¼tunlar

with col1:
    extract_button = st.button("Veriyi Ã‡Ä±kar", key="extract")

if extract_button:
    if not url:
        st.warning('LÃ¼tfen bir URL girin.')
        st.session_state.designer_data = None
        st.session_state.error_message = None
    elif not url.startswith(('http://', 'https://')) or 'levelshoes.com' not in url:
        st.warning('LÃ¼tfen geÃ§erli bir Level Shoes URL\'si girin.')
        st.session_state.designer_data = None
        st.session_state.error_message = None
        st.session_state.submitted_url = url # Girilen URL'yi kutuda tut
    else:
        st.session_state.submitted_url = url # BaÅŸarÄ±lÄ± gÃ¶nderim iÃ§in URL'yi sakla
        with st.spinner("Veriler alÄ±nÄ±yor ve iÅŸleniyor... LÃ¼tfen bekleyin."):
            result = extract_designers_from_url(url)
            if isinstance(result, list):
                st.session_state.designer_data = result
                st.session_state.error_message = None
                st.success('Veri baÅŸarÄ±yla Ã§Ä±karÄ±ldÄ±!')
            else: # Hata veya uyarÄ± mesajÄ± dÃ¶ndÃ¼
                st.session_state.designer_data = None
                st.session_state.error_message = result # Hata mesajÄ±nÄ± sakla

# --- SonuÃ§larÄ± GÃ¶ster ve Ä°ndirme Butonu ---
if st.session_state.error_message:
    st.error(st.session_state.error_message) # Saklanan hata mesajÄ±nÄ± gÃ¶ster

if st.session_state.designer_data and isinstance(st.session_state.designer_data, list):
    st.subheader(f"Ã‡Ä±karÄ±lan TasarÄ±mcÄ±lar ({len(st.session_state.designer_data) - 1} adet)")

    # Veriyi DataFrame olarak gÃ¶ster
    # Ä°lk satÄ±rÄ± (baÅŸlÄ±k) atlayarak DataFrame oluÅŸtur
    if len(st.session_state.designer_data) > 1:
        df_data = {
            st.session_state.designer_data[0][0]: [row[0] for row in st.session_state.designer_data[1:]],
            st.session_state.designer_data[0][1]: [row[1] for row in st.session_state.designer_data[1:]]
        }
        st.dataframe(df_data, use_container_width=True) # Tabloyu gÃ¶ster
    else:
        st.info("TasarÄ±mcÄ± listesi baÅŸlÄ±k dÄ±ÅŸÄ±nda veri iÃ§ermiyor.")


    # CSV Ä°ndirme Butonu
    csv_string = convert_to_csv(st.session_state.designer_data)
    st.download_button(
       label="CSV Olarak Ä°ndir",
       data=csv_string,
       file_name='level_shoes_designers.csv',
       mime='text/csv',
       key='download-csv'
    )

st.markdown("---")
st.caption("Not: Bu araÃ§ Level Shoes web sitesinin yapÄ±sÄ±na baÄŸlÄ±dÄ±r. Site gÃ¼ncellenirse araÃ§ Ã§alÄ±ÅŸmayabilir.")
